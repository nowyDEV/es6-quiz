!function(n){function e(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return n[r].call(s.exports,s,s.exports,e),s.l=!0,s.exports}var t={};e.m=n,e.c=t,e.i=function(n){return n},e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:r})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},e.p="",e(e.s=3)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return apiUrl; });\nvar apiUrl = 'https://cdn.rawgit.com/kdzwinel/cd08d08002995675f10d065985257416/raw/811ad96a0567648ff858b4f14d0096ba241f28ef/quiz-data.json';\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/config.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./js/config.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return utils; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = function () {\n  function utils() {\n    _classCallCheck(this, utils);\n  }\n\n  utils.displayTime = function displayTime(seconds, container) {\n    var minutesLeft = Math.floor(seconds / 60);\n    var secondsLeft = seconds % 60;\n    container.innerHTML = '<div class=\"sg-badge sg-badge--rounded\">\\n                               <div class=\"sg-text sg-text--emphasised quiz-timer__time\">\\n                                  ' + minutesLeft + '\\n                                  :\\n                                  ' + (secondsLeft < 10 ? '0' : '') + '\\n                                  ' + secondsLeft + '\\n                               </div>\\n                           </div>';\n  };\n\n  utils.disableElement = function disableElement(element) {\n    element.classList.add('sg-button-primary--disabled');\n    element.setAttribute('disabled', '');\n  };\n\n  utils.activateElement = function activateElement(element) {\n    element.classList.remove('sg-button-primary--disabled');\n    element.removeAttribute('disabled');\n  };\n\n  return utils;\n}();\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/utils.js\n// module id = 1\n// module chunks = 0\n\n//# sourceURL=webpack:///./js/utils.js?")},function(module,exports,__webpack_require__){eval("// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\n__webpack_require__(4);\nmodule.exports = self.fetch.bind(self);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/isomorphic-fetch/fetch-npm-browserify.js\n// module id = 2\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/isomorphic-fetch/fetch-npm-browserify.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_isomorphic_fetch__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_isomorphic_fetch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_isomorphic_fetch__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(1);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\n\n(function app() {\n  var actionButton = document.querySelector('.quiz-btn');\n  var questionsField = document.querySelector('.quiz-questions');\n  var quizTimer = document.querySelector('.quiz-timer');\n  var quizResults = document.querySelector('.quiz-results');\n  var countdown = void 0;\n\n  // Toggle off disabled state on the button after user checks answer\n  questionsField.addEventListener('click', function (e) {\n    if (e.target.matches('.quiz-questions__answer')) {\n      __WEBPACK_IMPORTED_MODULE_2__utils__[\"a\" /* utils */].activateElement(actionButton);\n    }\n  }, false);\n\n  var Quiz = function () {\n    function Quiz(dataUrl) {\n      var userPoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var currentQuestion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var correctAnswer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var timer = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var questions = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n\n      _classCallCheck(this, Quiz);\n\n      this.dataUrl = dataUrl;\n      this._userPoints = userPoints;\n      this.currentQuestion = currentQuestion;\n      this.correctAnswer = correctAnswer;\n      this.timer = timer;\n      this.questions = questions;\n    }\n\n    Quiz.prototype.getData = function getData() {\n      var _this = this;\n\n      var processData = function processData(data) {\n        _this.timer = data.time_seconds;\n        _this.questions = data.questions;\n      };\n      return __WEBPACK_IMPORTED_MODULE_0_isomorphic_fetch___default()(this.dataUrl).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        return processData(data);\n      }).catch(function (error) {\n        return console.log('Something went wrong', error);\n      });\n    };\n\n    Quiz.prototype.start = function start() {\n      var _this2 = this;\n\n      actionButton.onclick = function () {\n        return _this2.processAnswer();\n      };\n      actionButton.innerHTML = 'Next';\n      __WEBPACK_IMPORTED_MODULE_2__utils__[\"a\" /* utils */].disableElement(actionButton);\n\n      this.displayTimer(this.timer);\n      this.updateQuestion(this.questions[0]);\n    };\n\n    Quiz.prototype.displayTimer = function displayTimer(seconds) {\n      var _this3 = this;\n\n      clearInterval(countdown);\n\n      var presentTime = Date.now();\n      var finishTime = presentTime + seconds * 1000;\n\n      __WEBPACK_IMPORTED_MODULE_2__utils__[\"a\" /* utils */].displayTime(seconds, quizTimer);\n\n      countdown = setInterval(function () {\n        var secondsLeft = Math.round((finishTime - Date.now()) / 1000);\n\n        if (secondsLeft < 0) {\n          clearInterval(countdown);\n          _this3.showResult();\n        }\n\n        __WEBPACK_IMPORTED_MODULE_2__utils__[\"a\" /* utils */].displayTime(secondsLeft, quizTimer);\n      }, 1000);\n    };\n\n    Quiz.prototype.loadAnswers = function loadAnswers(answers) {\n      var _this4 = this;\n\n      return answers.map(function (answer) {\n        if (answer.correct) {\n          _this4.updateCorrectAnswer(answer.id);\n        }\n\n        return '<div class=\"sg-label sg-label--secondary\">\\n                    <div class=\"sg-label__icon\">\\n                        <div class=\"sg-radio\">\\n                            <input class=\"sg-radio__element quiz-questions__answer\" type=\"radio\" id=\"' + answer.id + '\" name=\"answer\">\\n                            <label class=\"sg-radio__ghost\" for=\"' + answer.id + '\"></label>\\n                        </div>\\n                    </div>\\n                    <label class=\"sg-label__text\" for=\"' + answer.id + '\">' + answer.answer + '</label>\\n                </div>';\n      });\n    };\n\n    Quiz.prototype.processAnswer = function processAnswer() {\n      if (this.currentQuestion < this.questions.length) {\n        var answer = parseInt(document.querySelector('input[name=answer]:checked').getAttribute('id'));\n        if (answer === this.correctAnswer) {\n          this.addPoint();\n        }\n        this.updateQuestion(this.questions[this.currentQuestion]);\n      } else this.showResult();\n    };\n\n    Quiz.prototype.updateCorrectAnswer = function updateCorrectAnswer(id) {\n      this.correctAnswer = id;\n    };\n\n    Quiz.prototype.addPoint = function addPoint() {\n      this._userPoints += 1;\n    };\n\n    Quiz.prototype.updateQuestion = function updateQuestion(question) {\n      questionsField.innerHTML = '<h3 class=\"quiz-questions__title\">' + question.question + '</h3>\\n                                  <form class=\"quiz-questions__form\">\\n                                      ' + this.loadAnswers(question.answers).join('') + '    \\n                                  </form>';\n      this.currentQuestion += 1;\n      __WEBPACK_IMPORTED_MODULE_2__utils__[\"a\" /* utils */].disableElement(actionButton);\n    };\n\n    Quiz.prototype.showResult = function showResult() {\n      var _this5 = this;\n\n      questionsField.style.display = 'none';\n      quizTimer.style.display = 'none';\n\n      actionButton.innerHTML = 'Try Again';\n      actionButton.onclick = function () {\n        return _this5.reset();\n      };\n      __WEBPACK_IMPORTED_MODULE_2__utils__[\"a\" /* utils */].activateElement(actionButton);\n\n      quizResults.innerHTML = '<div class=\"sg-flash\">\\n                                 <div class=\"sg-flash__message\">\\n                                   <div class=\"sg-text sg-text--emphasised sg-text--standout sg-text--light\">\\n                                     Correct answers: \\n                                                      <div class=\"sg-badge sg-badge--large sg-badge--blue-secondary-light\">\\n                                                        <div class=\"sg-text sg-text--emphasised sg-text--standout sg-text--blue\"> ' + this._userPoints + ' / ' + this.questions.length + '</div>\\n                                                      </div>\\n                                   </div>\\n                                 </div>\\n                               </div>';\n      quizResults.style.display = 'block';\n    };\n\n    Quiz.prototype.reset = function reset() {\n      this._userPoints = 0;\n      this.currentQuestion = 0;\n      this.correctAnswer = 0;\n      questionsField.style.display = 'block';\n      quizTimer.style.display = 'block';\n      quizResults.style.display = 'none';\n      this.start();\n    };\n\n    return Quiz;\n  }();\n\n  var brainlyQuiz = new Quiz(__WEBPACK_IMPORTED_MODULE_1__config__[\"a\" /* apiUrl */]);\n  brainlyQuiz.getData();\n  actionButton.onclick = function () {\n    return brainlyQuiz.start();\n  };\n})();\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/app.js\n// module id = 3\n// module chunks = 0\n\n//# sourceURL=webpack:///./js/app.js?")},function(module,exports){eval("(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/whatwg-fetch/fetch.js\n// module id = 4\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/whatwg-fetch/fetch.js?")}]);